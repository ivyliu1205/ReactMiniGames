{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/zilla/Desktop/UNSW/COMP6080/Final/exam-sample/src/pages/Tetro.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HeaderBar from '../components/HeaderBar';\nimport FootBar from '../components/FootBar';\nimport '../styles/Tetro.css';\nexport default function Tetro() {\n  _s();\n\n  const [board, setBoard] = React.useState([]);\n  const [gameStart, setGameStart] = React.useState(false);\n  const [nGreen, setNGreen] = React.useState(0);\n  const types = [[[0, 0], [0, 1], [1, 0], [1, 1]], // 2 x 2\n  [[0, 0]], // 1 x 1\n  [[0, 0], [0, 1]] // 2 x 1 \n  ]; // let intervalHandler = null\n\n  function getRandomFromArray(array) {\n    const randIdx = Math.floor(Math.random() * array.length);\n    return array[randIdx];\n  }\n\n  function setInitBoard() {\n    console.log('setInitBoard');\n    const initBoard = [];\n\n    for (let i = 0; i < 12; i++) {\n      const newRow = [];\n\n      for (let j = 0; j < 10; j++) {\n        newRow.push(0);\n      }\n\n      initBoard.push(newRow);\n    }\n\n    setBoard(initBoard);\n  }\n\n  React.useEffect(setInitBoard, []);\n  React.useEffect(() => {\n    console.log('enter intervalHandler', gameStart);\n    let timer = null;\n\n    if (gameStart) {\n      timer = setInterval(() => {\n        let prevBlock = getPrevBlock();\n        console.log('prevBlock', prevBlock);\n        prevBlock = prevBlock.sort((x, y) => x[0] < y[0] ? 1 : x[0] > y[0] ? -1 : 0);\n        let maxHeight = 11;\n        prevBlock.map(ele => {\n          const currHeight = getHeightByCol(ele[1]);\n          console.log('currHeight', currHeight);\n\n          if (currHeight < maxHeight) {\n            maxHeight = currHeight;\n          }\n        });\n\n        if (prevBlock[0][0] < 11 && prevBlock[0][0] < maxHeight) {\n          const newBlock = prevBlock.map(ele => [ele[0] + 1, ele[1]]);\n          console.log('prevBlock', prevBlock, newBlock);\n          blockProjection(newBlock);\n        } else if (prevBlock[0][0] > maxHeight) {\n          console.log('new block');\n          blockProjection(prevBlock, 3);\n          turnGreen();\n          const randomStart = getRandomFromArray(types);\n          blockProjection(randomStart);\n        }\n      }, 500);\n    }\n\n    return () => clearInterval(timer);\n  }, [gameStart]); // React.useEffect(() => {\n  //     console.log('check status')\n  // }, [board])\n\n  const blocks = board.map((row, rowIdx) => {\n    const blockRows = row.map((cell, colIdx) => {\n      if (cell === 0) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-cells\",\n          name: rowIdx,\n          value: colIdx\n        }, colIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 24\n        }, this);\n      } else if (cell === 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"occupied-board-cells\",\n          name: rowIdx,\n          value: colIdx\n        }, colIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 24\n        }, this);\n      } else if (cell === 3) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"occupied-board-cells\",\n          name: rowIdx,\n          value: colIdx\n        }, colIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 24\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"finished-board-cells\",\n          name: rowIdx,\n          value: colIdx\n        }, colIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 24\n        }, this);\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-rows\",\n      children: blockRows\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  });\n\n  function getPrevBlock() {\n    const prev = [];\n    board.map((row, rowIdx) => {\n      row.map((col, colIdx) => {\n        if (col === 1) {\n          prev.push([rowIdx, colIdx]);\n        }\n\n        return col;\n      });\n      return row;\n    });\n    return prev;\n  }\n\n  function getHeightByCol(colIdx) {\n    let height = 11;\n\n    for (let i = 11; i >= 0; i--) {\n      if (board[i][colIdx] === 0) {\n        height = i;\n        break;\n      }\n    }\n\n    console.log(colIdx, height);\n    return height;\n  }\n\n  function turnGreen() {\n    const line = [];\n\n    for (let i = 0; i < 12; i++) {\n      if (board[i].filter(x => x === 3).length === 10) {\n        for (let j = 0; j < 10; j++) {\n          line.push([i, j]);\n        }\n      }\n    }\n\n    if (line.length > 0) {\n      blockProjection(line, 2);\n      setNGreen(nGreen + 1);\n    }\n  }\n\n  const handleKeyDown = event => {\n    console.log('enteer handleKeyDown', event.keyCode, gameStart);\n\n    if (event.keyCode === 37) {\n      // left\n      console.log('press left key'); // move to left\n\n      let prevBlock = getPrevBlock();\n      prevBlock = prevBlock.sort((x, y) => x[1] > y[1] ? 1 : x[1] < y[1] ? -1 : 0);\n\n      if (prevBlock[0][1] > 0) {\n        const newBlock = prevBlock.map(ele => [ele[0], ele[1] - 1]);\n        console.log('prevBlock', prevBlock, newBlock);\n        blockProjection(newBlock);\n      }\n    } else if (event.keyCode === 39) {\n      // right\n      console.log('press right key'); // move to right\n\n      let prevBlock = getPrevBlock();\n      prevBlock = prevBlock.sort((x, y) => x[1] < y[1] ? 1 : x[1] > y[1] ? -1 : 0);\n\n      if (prevBlock[0][1] < 9) {\n        const newBlock = prevBlock.map(ele => [ele[0], ele[1] + 1]);\n        console.log('prevBlock', prevBlock, newBlock);\n        blockProjection(newBlock);\n      }\n    }\n  };\n\n  function handleReset() {\n    console.log('handleReset');\n    setGameStart(false);\n    window.removeEventListener('keydown', handleKeyDown);\n    setInitBoard();\n  } // show curr block to board\n\n\n  function blockProjection(rawblocks, val = 1) {\n    console.log('enter blockProjection', rawblocks, board);\n    const newBoard = board.slice();\n\n    for (let i = 0; i < 12; i++) {\n      for (let j = 0; j < 10; j++) {\n        if (newBoard[i][j] === 1) {\n          newBoard[i][j] = 0;\n        }\n      }\n    }\n\n    for (let idx = 0; idx < rawblocks.length; idx++) {\n      newBoard[rawblocks[idx][0]][rawblocks[idx][1]] = val;\n    }\n\n    setBoard(newBoard);\n  }\n\n  function handleClick() {\n    console.log('enter handleClick', gameStart);\n    setGameStart(true);\n\n    if (gameStart) {\n      console.log('return');\n      return;\n    }\n\n    window.addEventListener('keydown', handleKeyDown); // show new block\n\n    const randomStart = getRandomFromArray(types);\n    blockProjection(randomStart);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(HeaderBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"board-container\",\n        onClick: handleClick,\n        children: blocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"tetro-reset-btn\",\n        onClick: handleReset,\n        children: \"RESET\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FootBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tetro, \"DxH5vWDYOb4YP0QnjQILM48zOZg=\");\n\n_c = Tetro;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetro\");","map":{"version":3,"sources":["/Users/zilla/Desktop/UNSW/COMP6080/Final/exam-sample/src/pages/Tetro.jsx"],"names":["React","HeaderBar","FootBar","Tetro","board","setBoard","useState","gameStart","setGameStart","nGreen","setNGreen","types","getRandomFromArray","array","randIdx","Math","floor","random","length","setInitBoard","console","log","initBoard","i","newRow","j","push","useEffect","timer","setInterval","prevBlock","getPrevBlock","sort","x","y","maxHeight","map","ele","currHeight","getHeightByCol","newBlock","blockProjection","turnGreen","randomStart","clearInterval","blocks","row","rowIdx","blockRows","cell","colIdx","prev","col","height","line","filter","handleKeyDown","event","keyCode","handleReset","window","removeEventListener","rawblocks","val","newBoard","slice","idx","handleClick","addEventListener"],"mappings":"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","sourcesContent":["import React from 'react'\nimport HeaderBar from '../components/HeaderBar'\nimport FootBar from '../components/FootBar'\nimport '../styles/Tetro.css'\n\nexport default function Tetro () {\n    const [ board, setBoard ] = React.useState([])\n    const [ gameStart, setGameStart ] = React.useState(false)\n    const [ nGreen, setNGreen ] = React.useState(0)\n    const types = [\n        [[0, 0], [0, 1], [1, 0], [1, 1]],   // 2 x 2\n        [[0, 0]],   // 1 x 1\n        [[0, 0], [0, 1]]    // 2 x 1 \n    ]\n    // let intervalHandler = null\n\n    function getRandomFromArray (array) {\n        const randIdx = Math.floor(Math.random() * array.length)\n        return array[randIdx]\n    }\n\n    function setInitBoard () {\n        console.log('setInitBoard')\n        const initBoard = []\n        for (let i = 0; i < 12; i++) {\n            const newRow = []\n            for (let j = 0; j < 10; j++) {\n                newRow.push(0)\n            }\n            initBoard.push(newRow)\n        }\n        setBoard(initBoard)\n    } \n\n    React.useEffect(setInitBoard, [])\n\n    React.useEffect(() => {\n        console.log('enter intervalHandler', gameStart)\n        let timer = null\n        if (gameStart) {\n            timer = setInterval(() => {\n                let prevBlock = getPrevBlock()\n                console.log('prevBlock', prevBlock)\n                prevBlock = prevBlock.sort((x, y) => (x[0] < y[0]) ? 1 : (x[0] > y[0]) ? -1 : 0)\n    \n                let maxHeight = 11\n                prevBlock.map(ele => {\n                    const currHeight = getHeightByCol(ele[1])\n                    console.log('currHeight', currHeight)\n                    if (currHeight < maxHeight) {\n                        maxHeight = currHeight\n                    }\n                })\n    \n                if (prevBlock[0][0] < 11 && prevBlock[0][0] < maxHeight) {\n                    const newBlock = prevBlock.map(ele => [ele[0] + 1, ele[1]])\n                    console.log('prevBlock', prevBlock, newBlock)\n                    blockProjection(newBlock)\n                } else if (prevBlock[0][0] > maxHeight) {\n                    console.log('new block')\n                    blockProjection(prevBlock, 3)\n                    turnGreen()\n\n                    const randomStart = getRandomFromArray(types)\n                    blockProjection(randomStart)\n                }\n            }, 500)\n        }\n        return () => clearInterval(timer)\n    }, [gameStart])\n\n    // React.useEffect(() => {\n    //     console.log('check status')\n    // }, [board])\n\n    const blocks = board.map((row, rowIdx) => {\n        const blockRows = row.map((cell, colIdx) => {\n            if (cell === 0) {\n                return <div key={colIdx} className=\"board-cells\" name={rowIdx} value={colIdx}></div>\n            } else if (cell === 1) {\n                return <div key={colIdx} className=\"occupied-board-cells\" name={rowIdx} value={colIdx}></div>\n            } else if (cell === 3) {\n                return <div key={colIdx} className=\"occupied-board-cells\" name={rowIdx} value={colIdx}></div>\n            } else {\n                return <div key={colIdx} className=\"finished-board-cells\" name={rowIdx} value={colIdx}></div>\n            }\n        })\n        return (\n            <div className=\"board-rows\" key={rowIdx}>\n                {blockRows}\n            </div>\n        )\n    })\n\n    function getPrevBlock () {\n        const prev = []\n        board.map((row, rowIdx) => {\n            row.map((col, colIdx) => {\n                if (col === 1) {\n                    prev.push([rowIdx, colIdx])\n                }\n                return col\n            })\n            return row\n        })\n        return prev\n    }\n\n    function getHeightByCol (colIdx) {\n        let height = 11\n        for (let i = 11; i >= 0; i--) {\n            if (board[i][colIdx] === 0) {\n                height = i\n                break\n            }\n        }\n        console.log(colIdx, height)\n        return height\n    }\n\n    function turnGreen () {\n        const line = []\n        for (let i = 0; i < 12; i++) {\n            if (board[i].filter(x => x === 3).length === 10) {\n                for (let j = 0; j < 10; j++) {\n                    line.push([i, j])\n                }\n            }\n        }\n        if (line.length > 0) {\n            blockProjection(line, 2)\n            setNGreen(nGreen + 1)\n        }\n    }\n\n    const handleKeyDown = (event) => {\n        console.log('enteer handleKeyDown', event.keyCode, gameStart)\n\n        if (event.keyCode === 37) {\n            // left\n            console.log('press left key')\n            \n            // move to left\n            let prevBlock = getPrevBlock()\n            prevBlock = prevBlock.sort((x, y) => (x[1] > y[1]) ? 1 : (x[1] < y[1]) ? -1 : 0)\n\n            if (prevBlock[0][1] > 0) {\n                const newBlock = prevBlock.map(ele => [ele[0], ele[1] - 1])\n                console.log('prevBlock', prevBlock, newBlock)\n                blockProjection(newBlock)\n            }\n        } else if (event.keyCode === 39) {\n            // right\n            console.log('press right key')\n\n            // move to right\n            let prevBlock = getPrevBlock()\n            prevBlock = prevBlock.sort((x, y) => (x[1] < y[1]) ? 1 : (x[1] > y[1]) ? -1 : 0)\n            \n            if (prevBlock[0][1] < 9) {\n                const newBlock = prevBlock.map(ele => [ele[0], ele[1] + 1])\n                console.log('prevBlock', prevBlock, newBlock)\n                blockProjection(newBlock)\n            }\n        }\n    }\n\n    function handleReset () {\n        console.log('handleReset')\n        setGameStart(false)\n        window.removeEventListener('keydown', handleKeyDown)\n        setInitBoard()\n    }\n\n    // show curr block to board\n    function blockProjection (rawblocks, val=1) {\n        console.log('enter blockProjection', rawblocks, board)\n        const newBoard = board.slice()\n        for (let i = 0; i < 12; i++) {\n            for (let j = 0; j < 10; j++) {\n                if (newBoard[i][j] === 1) {\n                    newBoard[i][j] = 0\n                }\n            }\n        }\n\n        for (let idx = 0; idx < rawblocks.length; idx++) {\n            newBoard[rawblocks[idx][0]][rawblocks[idx][1]] = val\n        }\n        setBoard(newBoard)    \n    }\n\n    function handleClick () {\n        console.log('enter handleClick', gameStart)\n        setGameStart(true)\n        if (gameStart) {\n            console.log('return')\n            return\n        }\n        window.addEventListener('keydown', handleKeyDown)\n\n        // show new block\n        const randomStart = getRandomFromArray(types)\n        blockProjection(randomStart)\n    }\n\n    return (\n        <div className=\"page-container\">\n            <HeaderBar />\n            <div className=\"container\">\n                <div id=\"board-container\" onClick={handleClick}>\n                    {blocks}\n                </div>\n                <button id=\"tetro-reset-btn\" onClick={handleReset}>\n                    RESET\n                </button>\n            </div>\n            <FootBar />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}