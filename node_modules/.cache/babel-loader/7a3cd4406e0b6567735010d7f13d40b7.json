{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/zilla/Desktop/UNSW/COMP6080/Final/exam-sample/src/pages/Tetro.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HeaderBar from '../components/HeaderBar';\nimport FootBar from '../components/FootBar';\nimport '../styles/Tetro.css';\nexport default function Tetro() {\n  _s();\n\n  const [board, setBoard] = React.useState([]);\n  const [gameStart, setGameStart] = React.useState(false);\n  let currBlock = [];\n  const types = [[[0, 0], [0, 1], [1, 0], [1, 1]], // 2 x 2\n  [[0, 0]], // 1 x 1\n  [[0, 0], [0, 1]] // 2 x 1 \n  ];\n\n  function getRandomFromArray(array) {\n    const randIdx = Math.floor(Math.random() * array.length);\n    return array[randIdx];\n  }\n\n  function setInitBoard() {\n    const initBoard = [];\n\n    for (let i = 0; i < 12; i++) {\n      const newRow = [];\n\n      for (let j = 0; j < 10; j++) {\n        newRow.push(0);\n      }\n\n      initBoard.push(newRow);\n    }\n\n    setBoard(initBoard);\n  }\n\n  React.useEffect(() => {\n    setInitBoard(); // eslint-disable-next-line\n\n    document.addEventListener('keydown', handleKeyDown); // eslint-disable-next-line\n  }, []);\n  const blocks = board.map((row, rowIdx) => {\n    console.log('enter blocks', currBlock);\n    const blockRows = row.map((cell, colIdx) => {\n      if (cell === 0) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-cells\",\n          name: rowIdx,\n          value: colIdx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 24\n        }, this);\n      } else if (cell === 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"occupied-board-cells\",\n          name: rowIdx,\n          value: colIdx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 24\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"finished-board-cells\",\n          name: rowIdx,\n          value: colIdx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 24\n        }, this);\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-rows\",\n      children: blockRows\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  });\n\n  function handleReset() {\n    console.log('handleReset');\n    setGameStart(false);\n    setInitBoard();\n  } // show curr block to board\n\n\n  function blockProjection() {\n    console.log('enter blockProjection', currBlock);\n    const newBoard = board.slice();\n    newBoard.map(row => {\n      row.map(cell => {\n        if (cell === 1) {\n          return 0;\n        }\n\n        return cell;\n      });\n      return row;\n    });\n\n    for (let idx = 0; idx < currBlock.length; idx++) {\n      newBoard[currBlock[idx][0]][currBlock[idx][1]] = 1;\n    }\n\n    console.log(newBoard);\n    setBoard(newBoard);\n  }\n\n  React.useEffect(() => {\n    console.log('game start');\n\n    if (!gameStart) {\n      return;\n    }\n\n    console.log('startstart'); // show new block\n    // eslint-disable-next-line\n\n    currBlock = getRandomFromArray(types);\n    blockProjection();\n  }, [gameStart]); // React.useEffect(blockProjection, [currBlock])\n\n  function handleKeyDown(event) {\n    console.log('enteer handleKeyDown', event.keyCode, gameStart, currBlock);\n\n    if (!gameStart) {\n      return;\n    }\n\n    if (event.keyCode === 37) {\n      // left\n      console.log('press left key', currBlock); // move to left\n\n      const tmpBlock = currBlock.map(ele => {\n        return [ele[0], ele[1] - 1];\n      });\n      currBlock = tmpBlock;\n      blockProjection();\n    } else if (event.keyCode === 39) {\n      // right\n      console.log('press right key', currBlock); // move to right\n\n      const tmpBlock = currBlock.map(ele => {\n        return [ele[0], ele[1] + 1];\n      });\n      console.log('move right', tmpBlock);\n      currBlock = tmpBlock;\n      blockProjection();\n    }\n  }\n\n  function handleClick() {\n    console.log('enter handleClick');\n    setGameStart(true);\n    console.log('set', gameStart);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(HeaderBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"board-container\",\n        onClick: handleClick,\n        children: blocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"tetro-reset-btn\",\n        onClick: handleReset,\n        children: \"RESET\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FootBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tetro, \"AevLskqzRTmaSTxg74pnvdnYpFc=\");\n\n_c = Tetro;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetro\");","map":{"version":3,"sources":["/Users/zilla/Desktop/UNSW/COMP6080/Final/exam-sample/src/pages/Tetro.jsx"],"names":["React","HeaderBar","FootBar","Tetro","board","setBoard","useState","gameStart","setGameStart","currBlock","types","getRandomFromArray","array","randIdx","Math","floor","random","length","setInitBoard","initBoard","i","newRow","j","push","useEffect","document","addEventListener","handleKeyDown","blocks","map","row","rowIdx","console","log","blockRows","cell","colIdx","handleReset","blockProjection","newBoard","slice","idx","event","keyCode","tmpBlock","ele","handleClick"],"mappings":"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","sourcesContent":["import React from 'react'\nimport HeaderBar from '../components/HeaderBar'\nimport FootBar from '../components/FootBar'\nimport '../styles/Tetro.css'\n\nexport default function Tetro () {\n    const [ board, setBoard ] = React.useState([])\n    const [ gameStart, setGameStart] = React.useState(false)\n    let currBlock = []\n    const types = [\n        [[0, 0], [0, 1], [1, 0], [1, 1]],   // 2 x 2\n        [[0, 0]],   // 1 x 1\n        [[0, 0], [0, 1]]    // 2 x 1 \n    ]\n\n    function getRandomFromArray (array) {\n        const randIdx = Math.floor(Math.random() * array.length)\n        return array[randIdx]\n    }\n\n    function setInitBoard () {\n        const initBoard = []\n        for (let i = 0; i < 12; i++) {\n            const newRow = []\n            for (let j = 0; j < 10; j++) {\n                newRow.push(0)\n            }\n            initBoard.push(newRow)\n        }\n        setBoard(initBoard)\n    } \n\n    React.useEffect(() => {\n        setInitBoard()\n        // eslint-disable-next-line\n        document.addEventListener('keydown', handleKeyDown)\n        // eslint-disable-next-line\n    }, [])\n\n    const blocks = board.map((row, rowIdx) => {\n        console.log('enter blocks', currBlock)\n        const blockRows = row.map((cell, colIdx) => {\n            if (cell === 0) {\n                return <div className=\"board-cells\" name={rowIdx} value={colIdx}></div>\n            } else if (cell === 1) {\n                return <div className=\"occupied-board-cells\" name={rowIdx} value={colIdx}></div>\n            } else {\n                return <div className=\"finished-board-cells\" name={rowIdx} value={colIdx}></div>\n            }\n        })\n        return (\n            <div className=\"board-rows\" key={rowIdx}>\n                {blockRows}\n            </div>\n        )\n    })\n\n    function handleReset () {\n        console.log('handleReset')\n        setGameStart(false)\n        setInitBoard()\n    }\n\n    // show curr block to board\n    function blockProjection () {\n        console.log('enter blockProjection', currBlock)\n        const newBoard = board.slice()\n        newBoard.map(row => {\n            row.map(cell => {\n                if (cell === 1) {\n                    return 0\n                }\n                return cell\n            })\n            return row\n        })\n\n        for (let idx = 0; idx < currBlock.length; idx++) {\n            newBoard[currBlock[idx][0]][currBlock[idx][1]] = 1\n        }\n        console.log(newBoard)\n        setBoard(newBoard)    \n    }\n\n    React.useEffect(() => {\n        console.log('game start')\n        if (!gameStart) {\n            return\n        }\n        console.log('startstart')\n        \n        // show new block\n        // eslint-disable-next-line\n        currBlock = getRandomFromArray(types)\n        blockProjection()\n    }, [gameStart])\n\n    // React.useEffect(blockProjection, [currBlock])\n\n    function handleKeyDown (event) {\n        console.log('enteer handleKeyDown', event.keyCode, gameStart, currBlock)\n        if (!gameStart) {\n            return\n        }\n\n        if (event.keyCode === 37) {\n            // left\n            console.log('press left key', currBlock)\n            \n            // move to left\n            const tmpBlock = currBlock.map(ele => {\n                return [ele[0], ele[1] - 1]\n            })\n            currBlock = tmpBlock      \n            blockProjection()\n        } else if (event.keyCode === 39) {\n            // right\n            console.log('press right key', currBlock)\n\n            // move to right\n            const tmpBlock = currBlock.map(ele => {\n                return [ele[0], ele[1] + 1]\n            })\n            console.log('move right', tmpBlock)\n            currBlock = tmpBlock \n            blockProjection()\n        }\n    }\n\n    function handleClick () {\n        console.log('enter handleClick')\n        setGameStart(true)\n        console.log('set', gameStart)\n    }\n\n    return (\n        <div className=\"page-container\">\n            <HeaderBar />\n            <div className=\"container\">\n                <div id=\"board-container\" onClick={handleClick}>\n                    {blocks}\n                </div>\n                <button id=\"tetro-reset-btn\" onClick={handleReset}>\n                    RESET\n                </button>\n            </div>\n            <FootBar />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}