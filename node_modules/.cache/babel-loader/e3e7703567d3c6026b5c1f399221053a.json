{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/zilla/Desktop/UNSW/COMP6080/Final/exam-sample/src/pages/Tetro.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport HeaderBar from '../components/HeaderBar';\nimport FootBar from '../components/FootBar';\nimport '../styles/Tetro.css';\nexport default function Tetro() {\n  _s();\n\n  const [board, setBoard] = React.useState([]);\n  const [gameStart, setGameStart] = React.useState(false);\n  const types = [[[0, 0], [0, 1], [1, 0], [1, 1]], // 2 x 2\n  [[0, 0]], // 1 x 1\n  [[0, 0], [0, 1]] // 2 x 1 \n  ];\n\n  function getRandomFromArray(array) {\n    const randIdx = Math.floor(Math.random() * array.length);\n    return array[randIdx];\n  }\n\n  function setInitBoard() {\n    console.log('setInitBoard');\n    const initBoard = [];\n\n    for (let i = 0; i < 12; i++) {\n      const newRow = [];\n\n      for (let j = 0; j < 10; j++) {\n        newRow.push(0);\n      }\n\n      initBoard.push(newRow);\n    }\n\n    setBoard(initBoard);\n  }\n\n  React.useEffect(setInitBoard, []);\n  const blocks = board.map((row, rowIdx) => {\n    const blockRows = row.map((cell, colIdx) => {\n      if (cell === 0) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-cells\",\n          name: rowIdx,\n          value: colIdx\n        }, colIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 24\n        }, this);\n      } else if (cell === 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"occupied-board-cells\",\n          name: rowIdx,\n          value: colIdx\n        }, colIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 24\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"finished-board-cells\",\n          name: rowIdx,\n          value: colIdx\n        }, colIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 24\n        }, this);\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-rows\",\n      children: blockRows\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  });\n\n  function getPrevBlock() {\n    const prev = [];\n    board.map((row, rowIdx) => {\n      row.map((col, colIdx) => {\n        if (col === 1) {\n          prev.push([rowIdx, colIdx]);\n        }\n\n        return col;\n      });\n      return row;\n    });\n    return prev;\n  }\n\n  const handleKeyDown = event => {\n    console.log('enteer handleKeyDown', event.keyCode, gameStart); // if (!gameStart) {\n    //     return\n    // }\n\n    if (event.keyCode === 37) {\n      // left\n      console.log('press left key'); // move to left\n\n      const prevBlock = getPrevBlock();\n      const newBlock = prevBlock.map(ele => [ele[0], ele[1] - 1]);\n      console.log('prevBlock', prevBlock, newBlock);\n      blockProjection(newBlock);\n    } else if (event.keyCode === 39) {\n      // right\n      console.log('press right key'); // move to right\n\n      const prevBlock = getPrevBlock();\n      const newBlock = prevBlock.map(ele => [ele[0], ele[1] + 1]);\n      console.log('prevBlock', prevBlock, newBlock);\n      blockProjection(newBlock);\n    }\n  };\n\n  function handleReset() {\n    console.log('handleReset');\n    setGameStart(false);\n    window.removeEventListener('keydown', handleKeyDown);\n    setInitBoard();\n  } // show curr block to board\n\n\n  function blockProjection(rawblocks) {\n    console.log('enter blockProjection', board);\n    const newBoard = board.slice();\n\n    for (let i = 0; i < 12; i++) {\n      for (let j = 0; j < 10; j++) {\n        if (newBoard[i][j] === 1) {\n          newBoard[i][j] = 0;\n        }\n      }\n    }\n\n    for (let idx = 0; idx < rawblocks.length; idx++) {\n      newBoard[rawblocks[idx][0]][rawblocks[idx][1]] = 1;\n    }\n\n    setBoard(newBoard);\n  }\n\n  function handleClick() {\n    console.log('enter handleClick', gameStart);\n    setGameStart(true);\n\n    if (gameStart) {\n      console.log('return');\n      return;\n    }\n\n    window.addEventListener('keydown', handleKeyDown); // show new block\n\n    const randomStart = getRandomFromArray(types);\n    blockProjection(randomStart);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(HeaderBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"board-container\",\n        onClick: handleClick,\n        children: blocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"tetro-reset-btn\",\n        onClick: handleReset,\n        children: \"RESET\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FootBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tetro, \"VxlErEh73BzVi4tTq3Cyw+TwET0=\");\n\n_c = Tetro;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetro\");","map":{"version":3,"sources":["/Users/zilla/Desktop/UNSW/COMP6080/Final/exam-sample/src/pages/Tetro.jsx"],"names":["React","HeaderBar","FootBar","Tetro","board","setBoard","useState","gameStart","setGameStart","types","getRandomFromArray","array","randIdx","Math","floor","random","length","setInitBoard","console","log","initBoard","i","newRow","j","push","useEffect","blocks","map","row","rowIdx","blockRows","cell","colIdx","getPrevBlock","prev","col","handleKeyDown","event","keyCode","prevBlock","newBlock","ele","blockProjection","handleReset","window","removeEventListener","rawblocks","newBoard","slice","idx","handleClick","addEventListener","randomStart"],"mappings":"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","sourcesContent":["import React from 'react'\nimport HeaderBar from '../components/HeaderBar'\nimport FootBar from '../components/FootBar'\nimport '../styles/Tetro.css'\n\nexport default function Tetro () {\n    const [ board, setBoard ] = React.useState([])\n    const [ gameStart, setGameStart ] = React.useState(false)\n    const types = [\n        [[0, 0], [0, 1], [1, 0], [1, 1]],   // 2 x 2\n        [[0, 0]],   // 1 x 1\n        [[0, 0], [0, 1]]    // 2 x 1 \n    ]\n\n    function getRandomFromArray (array) {\n        const randIdx = Math.floor(Math.random() * array.length)\n        return array[randIdx]\n    }\n\n    function setInitBoard () {\n        console.log('setInitBoard')\n        const initBoard = []\n        for (let i = 0; i < 12; i++) {\n            const newRow = []\n            for (let j = 0; j < 10; j++) {\n                newRow.push(0)\n            }\n            initBoard.push(newRow)\n        }\n        setBoard(initBoard)\n    } \n\n    React.useEffect(setInitBoard, [])\n\n    const blocks = board.map((row, rowIdx) => {\n        const blockRows = row.map((cell, colIdx) => {\n            if (cell === 0) {\n                return <div key={colIdx} className=\"board-cells\" name={rowIdx} value={colIdx}></div>\n            } else if (cell === 1) {\n                return <div key={colIdx} className=\"occupied-board-cells\" name={rowIdx} value={colIdx}></div>\n            } else {\n                return <div key={colIdx} className=\"finished-board-cells\" name={rowIdx} value={colIdx}></div>\n            }\n        })\n        return (\n            <div className=\"board-rows\" key={rowIdx}>\n                {blockRows}\n            </div>\n        )\n    })\n\n    function getPrevBlock () {\n        const prev = []\n        board.map((row, rowIdx) => {\n            row.map((col, colIdx) => {\n                if (col === 1) {\n                    prev.push([rowIdx, colIdx])\n                }\n                return col\n            })\n            return row\n        })\n        return prev\n    }\n\n    const handleKeyDown = (event) => {\n        console.log('enteer handleKeyDown', event.keyCode, gameStart)\n        // if (!gameStart) {\n        //     return\n        // }\n\n        if (event.keyCode === 37) {\n            // left\n            console.log('press left key')\n            \n            // move to left\n            const prevBlock = getPrevBlock()\n            const newBlock = prevBlock.map(ele => [ele[0], ele[1] - 1])\n            console.log('prevBlock', prevBlock, newBlock)\n            blockProjection(newBlock)\n        } else if (event.keyCode === 39) {\n            // right\n            console.log('press right key')\n\n            // move to right\n            const prevBlock = getPrevBlock()\n            const newBlock = prevBlock.map(ele => [ele[0], ele[1] + 1])\n            console.log('prevBlock', prevBlock, newBlock)\n            blockProjection(newBlock)\n        }\n    }\n\n    function handleReset () {\n        console.log('handleReset')\n        setGameStart(false)\n        window.removeEventListener('keydown', handleKeyDown)\n        setInitBoard()\n    }\n\n    // show curr block to board\n    function blockProjection (rawblocks) {\n        console.log('enter blockProjection', board)\n        const newBoard = board.slice()\n        for (let i = 0; i < 12; i++) {\n            for (let j = 0; j < 10; j++) {\n                if (newBoard[i][j] === 1) {\n                    newBoard[i][j] = 0\n                }\n            }\n        }\n\n        for (let idx = 0; idx < rawblocks.length; idx++) {\n            newBoard[rawblocks[idx][0]][rawblocks[idx][1]] = 1\n        }\n        setBoard(newBoard)    \n    }\n\n    function handleClick () {\n        console.log('enter handleClick', gameStart)\n        setGameStart(true)\n        if (gameStart) {\n            console.log('return')\n            return\n        }\n        window.addEventListener('keydown', handleKeyDown)\n\n        // show new block\n        const randomStart = getRandomFromArray(types)\n        blockProjection(randomStart)\n    }\n\n    return (\n        <div className=\"page-container\">\n            <HeaderBar />\n            <div className=\"container\">\n                <div id=\"board-container\" onClick={handleClick}>\n                    {blocks}\n                </div>\n                <button id=\"tetro-reset-btn\" onClick={handleReset}>\n                    RESET\n                </button>\n            </div>\n            <FootBar />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}